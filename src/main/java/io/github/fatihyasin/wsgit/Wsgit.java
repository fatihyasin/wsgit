package io.github.fatihyasin.wsgit;

import com.sun.tools.ws.wscompile.WsimportTool;
import java.io.ByteArrayOutputStream;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintStream;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.stream.Collectors;

import javax.swing.JFileChooser;
import javax.swing.UIManager;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author fatihyasin
 */
public class Wsgit extends javax.swing.JFrame {

    private static final String PROPERTIES_FILE_NAME = "wsgit.properties";

    public Wsgit() {
        initComponents();
        loadProperties();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        inputPanel = new javax.swing.JPanel();
        wsdlLabel = new javax.swing.JLabel();
        wsdlTextField = new javax.swing.JTextField();
        wsdlBrowseButton = new javax.swing.JButton();
        packageLabel = new javax.swing.JLabel();
        packageTextField = new javax.swing.JTextField();
        outputDirLabel = new javax.swing.JLabel();
        outputDirTextField = new javax.swing.JTextField();
        outputDirButton = new javax.swing.JButton();
        clientJarCheckBox = new javax.swing.JCheckBox();
        clientJarTextField = new javax.swing.JTextField();
        extraArgsLabel = new javax.swing.JLabel();
        extraArgsTextField = new javax.swing.JTextField();
        keepFilesCheckBox = new javax.swing.JCheckBox();
        generateFilesButton = new javax.swing.JButton();
        outputConsoleScrollPane = new javax.swing.JScrollPane();
        outputConsoleTextArea = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("WSDL GUI Import Tool");
        setPreferredSize(new java.awt.Dimension(640, 360));

        inputPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        wsdlLabel.setText("Wsdl:");

        wsdlBrowseButton.setText("Browse...");
        wsdlBrowseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wsdlBrowseButtonActionPerformed(evt);
            }
        });

        packageLabel.setText("Package:");

        outputDirLabel.setText("Output Directory:");

        outputDirTextField.setText(".");

        outputDirButton.setText("Browse...");
        outputDirButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                outputDirButtonActionPerformed(evt);
            }
        });

        clientJarCheckBox.setText("Client Jar");
        clientJarCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clientJarCheckBoxActionPerformed(evt);
            }
        });

        clientJarTextField.setEnabled(false);

        extraArgsLabel.setText("Extra Arguments:");

        keepFilesCheckBox.setText("Keep Files");

        generateFilesButton.setText("Generate Files");
        generateFilesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateFilesButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout inputPanelLayout = new javax.swing.GroupLayout(inputPanel);
        inputPanel.setLayout(inputPanelLayout);
        inputPanelLayout.setHorizontalGroup(
            inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(inputPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(inputPanelLayout.createSequentialGroup()
                        .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(wsdlLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(clientJarCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(packageLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(outputDirLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(extraArgsLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(inputPanelLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(inputPanelLayout.createSequentialGroup()
                                        .addComponent(outputDirTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 435, Short.MAX_VALUE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(outputDirButton))
                                    .addComponent(packageTextField)
                                    .addComponent(clientJarTextField)
                                    .addGroup(inputPanelLayout.createSequentialGroup()
                                        .addComponent(wsdlTextField)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(wsdlBrowseButton))))
                            .addGroup(inputPanelLayout.createSequentialGroup()
                                .addGap(5, 5, 5)
                                .addComponent(extraArgsTextField))))
                    .addGroup(inputPanelLayout.createSequentialGroup()
                        .addComponent(keepFilesCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(generateFilesButton)))
                .addContainerGap())
        );
        inputPanelLayout.setVerticalGroup(
            inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(inputPanelLayout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(wsdlLabel)
                    .addComponent(wsdlTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(wsdlBrowseButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(packageLabel)
                    .addComponent(packageTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(outputDirLabel)
                    .addComponent(outputDirTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(outputDirButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(clientJarCheckBox)
                    .addComponent(clientJarTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(extraArgsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(extraArgsLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(keepFilesCheckBox)
                    .addComponent(generateFilesButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        outputConsoleTextArea.setEditable(false);
        outputConsoleTextArea.setColumns(20);
        outputConsoleTextArea.setRows(5);
        outputConsoleScrollPane.setViewportView(outputConsoleTextArea);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(inputPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(outputConsoleScrollPane))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(inputPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(outputConsoleScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void outputDirButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_outputDirButtonActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int returnValue = fileChooser.showOpenDialog(null);
        if (returnValue == JFileChooser.APPROVE_OPTION) {
            outputDirTextField.setText(fileChooser.getSelectedFile().getAbsolutePath());
        }
    }//GEN-LAST:event_outputDirButtonActionPerformed

    private void clientJarCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clientJarCheckBoxActionPerformed
        clientJarTextField.setEnabled(clientJarCheckBox.isSelected());
    }//GEN-LAST:event_clientJarCheckBoxActionPerformed

    private void wsdlBrowseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wsdlBrowseButtonActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.addChoosableFileFilter(new FileNameExtensionFilter("WSDL Files", "wsdl"));
        int returnValue = fileChooser.showOpenDialog(null);
        if (returnValue == JFileChooser.APPROVE_OPTION) {
            wsdlTextField.setText(fileChooser.getSelectedFile().getAbsolutePath());
        }
    }//GEN-LAST:event_wsdlBrowseButtonActionPerformed

    private void generateFilesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateFilesButtonActionPerformed
        String[] args = getArgs();

        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        PrintStream ps = new PrintStream(baos);
        PrintStream sout = System.out;
        System.setOut(ps);

        WsimportTool wsimportTool = new WsimportTool(baos);
        wsimportTool.run(args);
        try {
            outputConsoleTextArea.setText(baos.toString("UTF-8"));
        } catch (UnsupportedEncodingException ex) {
            Logger.getLogger(Wsgit.class.getName()).log(Level.SEVERE, null, ex);
        }
        System.setOut(sout);
        storeProperties();
    }//GEN-LAST:event_generateFilesButtonActionPerformed

    private String[] getArgs() {
        List<String> argList = new ArrayList<>();
        if (!outputDirTextField.getText().isBlank()) {
            argList.add("-d");
            argList.add(outputDirTextField.getText());
        }
        if (!packageTextField.getText().isBlank()) {
            argList.add("-p");
            argList.add(packageTextField.getText());
        }
        if (!extraArgsTextField.getText().isBlank()) {
            argList.addAll(Arrays.stream(extraArgsTextField.getText().trim().split("\\s+")).collect(Collectors.toList()));
        }
        if (clientJarCheckBox.isSelected() && !clientJarTextField.getText().isBlank()) {
            argList.add("-clientjar");
            final String clientJarName = clientJarTextField.getText().trim();
            String jarName = clientJarName.endsWith(".jar") ? clientJarName : clientJarName + ".jar";
            argList.add(jarName);
        }
        if (keepFilesCheckBox.isSelected()) {
            argList.add("-keep");
        }
        argList.add(wsdlTextField.getText());
        return argList.toArray(String[]::new);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Wsgit.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        java.awt.EventQueue.invokeLater(() -> {
            new Wsgit().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox clientJarCheckBox;
    private javax.swing.JTextField clientJarTextField;
    private javax.swing.JLabel extraArgsLabel;
    private javax.swing.JTextField extraArgsTextField;
    private javax.swing.JButton generateFilesButton;
    private javax.swing.JPanel inputPanel;
    private javax.swing.JCheckBox keepFilesCheckBox;
    private javax.swing.JScrollPane outputConsoleScrollPane;
    private javax.swing.JTextArea outputConsoleTextArea;
    private javax.swing.JButton outputDirButton;
    private javax.swing.JLabel outputDirLabel;
    private javax.swing.JTextField outputDirTextField;
    private javax.swing.JLabel packageLabel;
    private javax.swing.JTextField packageTextField;
    private javax.swing.JButton wsdlBrowseButton;
    private javax.swing.JLabel wsdlLabel;
    private javax.swing.JTextField wsdlTextField;
    // End of variables declaration//GEN-END:variables

    private void loadProperties() {
        Properties wsgitProperties = new Properties();
        try (FileReader propertiesFileReader = new FileReader(PROPERTIES_FILE_NAME)) {
            wsgitProperties.load(propertiesFileReader);
        } catch (IOException ex) {
            // continue
        }
        if (!wsgitProperties.isEmpty()) {
            wsdlTextField.setText(wsgitProperties.getProperty("wsdl", ""));
            packageTextField.setText(wsgitProperties.getProperty("package", ""));
            outputDirTextField.setText(wsgitProperties.getProperty("outputDir", "."));
            clientJarCheckBox.setSelected(!wsgitProperties.getProperty("clientJar", "").isBlank());
            clientJarTextField.setEnabled(!wsgitProperties.getProperty("clientJar", "").isBlank());
            clientJarTextField.setText(wsgitProperties.getProperty("clientJar", ""));
            extraArgsTextField.setText(wsgitProperties.getProperty("extraArgs", ""));
            keepFilesCheckBox.setSelected(Boolean.parseBoolean(wsgitProperties.getProperty("keepFiles", "false")));
        }
    }

    private void storeProperties() {
        Properties wsgitProperties = new Properties();
        wsgitProperties.setProperty("wsdl", wsdlTextField.getText());
        wsgitProperties.setProperty("package", packageTextField.getText());
        wsgitProperties.setProperty("outputDir", outputDirTextField.getText());
        wsgitProperties.setProperty("clientJar", clientJarTextField.getText());
        wsgitProperties.setProperty("extraArgs", extraArgsTextField.getText());
        wsgitProperties.setProperty("keepFiles", String.valueOf(keepFilesCheckBox.isSelected()));
        try (FileOutputStream fileOutputStream = new FileOutputStream(PROPERTIES_FILE_NAME)) {
            wsgitProperties.store(fileOutputStream, null);
        } catch (IOException ex) {
            Logger.getLogger(Wsgit.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

}
